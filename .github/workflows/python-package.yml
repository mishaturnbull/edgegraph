on:
  push:
    branches: [ "master", "develop", "release/*" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # check on all non-end-of-life python versions
        python-version: [
          "3.13t",
          "3.13",
          "3.12",
          "3.11",
          "3.10",
          "3.9",
          "3.8",
          "3.7",
        ]

        include:
        - { python-version: "3.13t", disable-gil: true }

    steps:
    # get everything set up
    - uses: actions/checkout@main
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install plantuml
        python -m pip install --upgrade pip
        pip install .[development]

    - name: Version Info Dump
      run: |
        uname -r
        python -VV
        python -m pip freeze

    - name: Documentation coverage
      if: ${{ matrix.python-version == '3.13' }}
      run: |
        cd docs
        make coverage
        cat _build/coverage/python.txt
        if [[ ( $(grep TOTAL _build/coverage/python.txt | awk '{print $4}') == "100.00%") ]]; then true; else false; fi

    - name: Ruff lint check
      run: |
        ruff check edgegraph docs tests --output-format=github

    - name: Ruff format check
      # there's only sense in running formatting against the latest version.
      # it's the same code no matter what, and black performs the same analysis
      # (except on py3.7, which predates reading from pyproject.toml and
      # missing some configs)
      if: ${{ matrix.python-version == '3.13' }}
      run: |
        ruff format --check

    - name: MyPy type-hinting check
      # similarly to black, we only need to run this on latest version
      if: ${{ matrix.python-version == '3.13' }}
      run: |
        # hide it behind || true to mask mypy lacking an --exit-zero esque flag
        mypy edgegraph || true

    - name: Run unit tests
      run: |
        # this does generate the code coverage report.  however, pytest-cov
        # plugin seems can't cause it to exit nonzero on a "not enough coverage"
        # condition... so we'll just save off the coverage info here, and check
        # it in the next step.
        #
        # we also collect the longest handful of unit test durations here --
        # mainly for trend detection, to see if "oh hey, this particular test
        # is always slow".  nothing is programmatically using the data, at
        # least, yet.  but, don't run the marked-as-slow stress tests here to
        # avoid taking up too much time on the runner (of concern due to
        # GitHub's pricing)
        pytest --cov=edgegraph --cov-branch --durations=0 -m "not (slow or perf)"

    - name: Check unit test coverage
      run: |
        # fail-under option causes a nonzero exit
        coverage report --fail-under=100

