@startuml

class Vertex {
    Represents a vertex
    in a graph.
    __
    {field} +links: Link[]
}

class Universe {
    Represents a collection of 
    vertices and edges.
    Effectively, a single graph.
    __
    {field} +vertices: Vertex[]
    {field} +laws: dict
}

json UniverseLaws {
    "edge_whitelist": {
        "*": {
            "*": "*"
        }
    },
    "mixed_links": false,
    "cycles": true,
    "multipath": true,
    "multiverse": true
}

class Operation<Callable> {
    A special type of vertex
    representing a callable
    operation (function).
    __
    {field} +parameters: dict
    {field} +output: object
    {field} #state: dict
    {method} +run()
}

json BatteriesIncludedOperations {
    "Traversals": [
        "Depth-first traversal",
        "Breadth-first traversal"
    ],
    "Searches": [
        "Depth-first search",
        "Breadth-first search"
    ],
    "Categorization": [
        "Cycle detection",
        "Component detection",
        "Island detection"
    ],
    "Rendering": [
        "PlantUML",
        "?? TikZ ??",
        "?? MatPlotLib ??"
    ],
    "Ingest": [
        "Node-list dictionary",
        "Adjacency matrix",
        "Edge-pair list",
        "Direct linkage"
    ]
}

@enduml

